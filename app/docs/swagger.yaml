basePath: /
definitions:
  request.UserCreateRequest:
    properties:
      name:
        type: string
    type: object
  response.UserCreateResponse:
    properties:
      token:
        type: string
    type: object
  response.UserGetResponse:
    properties:
      highScore:
        type: integer
      id:
        type: string
      name:
        type: string
    type: object
  response.UserRankingResponse:
    properties:
      highScore:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This project is a one-command, feature-complete game server starter.
  title: Game Server API
  version: "1.0"
paths:
  /user/create:
    post:
      consumes:
      - application/json
      description: Create a new user with the given name.
      parameters:
      - description: User info
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/request.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserCreateResponse'
      summary: Create a new user
      tags:
      - Users
  /user/destroy:
    post:
      consumes:
      - application/json
      description: Delete a user by their ID.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - Users
  /user/get:
    post:
      consumes:
      - application/json
      description: Get the information of a user by their ID.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserGetResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user information
      tags:
      - Users
  /user/score:
    post:
      consumes:
      - application/json
      description: Update the score of a user if the new score is higher than the
        current score.
      produces:
      - application/json
      responses:
        "200":
          description: ScoreUpdateHandle triggered
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update user score
      tags:
      - Scores
  /users/get:
    get:
      consumes:
      - application/json
      description: Get the rankings of all users based on their high scores.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.UserRankingResponse'
            type: array
      summary: Get user rankings
      tags:
      - Rankings
swagger: "2.0"
