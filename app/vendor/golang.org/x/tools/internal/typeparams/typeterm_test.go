// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by copytermlist.go DO NOT EDIT.

package typeparams

import (
	"go/types"
	"reflect"
	"testing"
)

func Test_term_String(t *testing.T) {
	type fields struct {
		tilde bool
		typ   types.Type
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &term{
				tilde: tt.fields.tilde,
				typ:   tt.fields.typ,
			}
			if got := x.String(); got != tt.want {
				t.Errorf("term.String() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_term_equal(t *testing.T) {
	type fields struct {
		tilde bool
		typ   types.Type
	}
	type args struct {
		y *term
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &term{
				tilde: tt.fields.tilde,
				typ:   tt.fields.typ,
			}
			if got := x.equal(tt.args.y); got != tt.want {
				t.Errorf("term.equal() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_term_union(t *testing.T) {
	type fields struct {
		tilde bool
		typ   types.Type
	}
	type args struct {
		y *term
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *term
		want1  *term
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &term{
				tilde: tt.fields.tilde,
				typ:   tt.fields.typ,
			}
			got, got1 := x.union(tt.args.y)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("term.union() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("term.union() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func Test_term_intersect(t *testing.T) {
	type fields struct {
		tilde bool
		typ   types.Type
	}
	type args struct {
		y *term
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *term
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &term{
				tilde: tt.fields.tilde,
				typ:   tt.fields.typ,
			}
			if got := x.intersect(tt.args.y); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("term.intersect() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_term_includes(t *testing.T) {
	type fields struct {
		tilde bool
		typ   types.Type
	}
	type args struct {
		t types.Type
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &term{
				tilde: tt.fields.tilde,
				typ:   tt.fields.typ,
			}
			if got := x.includes(tt.args.t); got != tt.want {
				t.Errorf("term.includes() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_term_subsetOf(t *testing.T) {
	type fields struct {
		tilde bool
		typ   types.Type
	}
	type args struct {
		y *term
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &term{
				tilde: tt.fields.tilde,
				typ:   tt.fields.typ,
			}
			if got := x.subsetOf(tt.args.y); got != tt.want {
				t.Errorf("term.subsetOf() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_term_disjoint(t *testing.T) {
	type fields struct {
		tilde bool
		typ   types.Type
	}
	type args struct {
		y *term
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			x := &term{
				tilde: tt.fields.tilde,
				typ:   tt.fields.typ,
			}
			if got := x.disjoint(tt.args.y); got != tt.want {
				t.Errorf("term.disjoint() = %v, want %v", got, tt.want)
			}
		})
	}
}
