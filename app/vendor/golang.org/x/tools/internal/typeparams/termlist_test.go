// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by copytermlist.go DO NOT EDIT.

package typeparams

import (
	"go/types"
	"reflect"
	"testing"
)

func Test_termlist_String(t *testing.T) {
	tests := []struct {
		name string
		xl   termlist
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.String(); got != tt.want {
				t.Errorf("termlist.String() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_termlist_isEmpty(t *testing.T) {
	tests := []struct {
		name string
		xl   termlist
		want bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.isEmpty(); got != tt.want {
				t.Errorf("termlist.isEmpty() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_termlist_isAll(t *testing.T) {
	tests := []struct {
		name string
		xl   termlist
		want bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.isAll(); got != tt.want {
				t.Errorf("termlist.isAll() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_termlist_norm(t *testing.T) {
	tests := []struct {
		name string
		xl   termlist
		want termlist
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.norm(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("termlist.norm() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_termlist_union(t *testing.T) {
	type args struct {
		yl termlist
	}
	tests := []struct {
		name string
		xl   termlist
		args args
		want termlist
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.union(tt.args.yl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("termlist.union() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_termlist_intersect(t *testing.T) {
	type args struct {
		yl termlist
	}
	tests := []struct {
		name string
		xl   termlist
		args args
		want termlist
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.intersect(tt.args.yl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("termlist.intersect() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_termlist_equal(t *testing.T) {
	type args struct {
		yl termlist
	}
	tests := []struct {
		name string
		xl   termlist
		args args
		want bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.equal(tt.args.yl); got != tt.want {
				t.Errorf("termlist.equal() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_termlist_includes(t *testing.T) {
	type args struct {
		t types.Type
	}
	tests := []struct {
		name string
		xl   termlist
		args args
		want bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.includes(tt.args.t); got != tt.want {
				t.Errorf("termlist.includes() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_termlist_supersetOf(t *testing.T) {
	type args struct {
		y *term
	}
	tests := []struct {
		name string
		xl   termlist
		args args
		want bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.supersetOf(tt.args.y); got != tt.want {
				t.Errorf("termlist.supersetOf() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_termlist_subsetOf(t *testing.T) {
	type args struct {
		yl termlist
	}
	tests := []struct {
		name string
		xl   termlist
		args args
		want bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.xl.subsetOf(tt.args.yl); got != tt.want {
				t.Errorf("termlist.subsetOf() = %v, want %v", got, tt.want)
			}
		})
	}
}
