// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/jsonschema-draft-04.json (4.357kB)
// schemas/v2/schema.json (40.248kB)

package spec

import (
	"crypto/sha256"
	"os"
	"reflect"
	"testing"
	"time"
)

func Test_bindataRead(t *testing.T) {
	type args struct {
		data []byte
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := bindataRead(tt.args.data, tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("bindataRead() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("bindataRead() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_bindataFileInfo_Name(t *testing.T) {
	type fields struct {
		name    string
		size    int64
		mode    os.FileMode
		modTime time.Time
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fi := bindataFileInfo{
				name:    tt.fields.name,
				size:    tt.fields.size,
				mode:    tt.fields.mode,
				modTime: tt.fields.modTime,
			}
			if got := fi.Name(); got != tt.want {
				t.Errorf("bindataFileInfo.Name() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_bindataFileInfo_Size(t *testing.T) {
	type fields struct {
		name    string
		size    int64
		mode    os.FileMode
		modTime time.Time
	}
	tests := []struct {
		name   string
		fields fields
		want   int64
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fi := bindataFileInfo{
				name:    tt.fields.name,
				size:    tt.fields.size,
				mode:    tt.fields.mode,
				modTime: tt.fields.modTime,
			}
			if got := fi.Size(); got != tt.want {
				t.Errorf("bindataFileInfo.Size() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_bindataFileInfo_Mode(t *testing.T) {
	type fields struct {
		name    string
		size    int64
		mode    os.FileMode
		modTime time.Time
	}
	tests := []struct {
		name   string
		fields fields
		want   os.FileMode
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fi := bindataFileInfo{
				name:    tt.fields.name,
				size:    tt.fields.size,
				mode:    tt.fields.mode,
				modTime: tt.fields.modTime,
			}
			if got := fi.Mode(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("bindataFileInfo.Mode() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_bindataFileInfo_ModTime(t *testing.T) {
	type fields struct {
		name    string
		size    int64
		mode    os.FileMode
		modTime time.Time
	}
	tests := []struct {
		name   string
		fields fields
		want   time.Time
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fi := bindataFileInfo{
				name:    tt.fields.name,
				size:    tt.fields.size,
				mode:    tt.fields.mode,
				modTime: tt.fields.modTime,
			}
			if got := fi.ModTime(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("bindataFileInfo.ModTime() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_bindataFileInfo_IsDir(t *testing.T) {
	type fields struct {
		name    string
		size    int64
		mode    os.FileMode
		modTime time.Time
	}
	tests := []struct {
		name   string
		fields fields
		want   bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fi := bindataFileInfo{
				name:    tt.fields.name,
				size:    tt.fields.size,
				mode:    tt.fields.mode,
				modTime: tt.fields.modTime,
			}
			if got := fi.IsDir(); got != tt.want {
				t.Errorf("bindataFileInfo.IsDir() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_bindataFileInfo_Sys(t *testing.T) {
	type fields struct {
		name    string
		size    int64
		mode    os.FileMode
		modTime time.Time
	}
	tests := []struct {
		name   string
		fields fields
		want   interface{}
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fi := bindataFileInfo{
				name:    tt.fields.name,
				size:    tt.fields.size,
				mode:    tt.fields.mode,
				modTime: tt.fields.modTime,
			}
			if got := fi.Sys(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("bindataFileInfo.Sys() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_jsonschemaDraft04JsonBytes(t *testing.T) {
	tests := []struct {
		name    string
		want    []byte
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := jsonschemaDraft04JsonBytes()
			if (err != nil) != tt.wantErr {
				t.Errorf("jsonschemaDraft04JsonBytes() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("jsonschemaDraft04JsonBytes() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_jsonschemaDraft04Json(t *testing.T) {
	tests := []struct {
		name    string
		want    *asset
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := jsonschemaDraft04Json()
			if (err != nil) != tt.wantErr {
				t.Errorf("jsonschemaDraft04Json() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("jsonschemaDraft04Json() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_v2SchemaJsonBytes(t *testing.T) {
	tests := []struct {
		name    string
		want    []byte
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := v2SchemaJsonBytes()
			if (err != nil) != tt.wantErr {
				t.Errorf("v2SchemaJsonBytes() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("v2SchemaJsonBytes() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_v2SchemaJson(t *testing.T) {
	tests := []struct {
		name    string
		want    *asset
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := v2SchemaJson()
			if (err != nil) != tt.wantErr {
				t.Errorf("v2SchemaJson() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("v2SchemaJson() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAsset(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := Asset(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("Asset() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Asset() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAssetString(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := AssetString(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("AssetString() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("AssetString() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMustAsset(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := MustAsset(tt.args.name); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MustAsset() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMustAssetString(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := MustAssetString(tt.args.name); got != tt.want {
				t.Errorf("MustAssetString() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAssetInfo(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    os.FileInfo
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := AssetInfo(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("AssetInfo() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("AssetInfo() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAssetDigest(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    [sha256.Size]byte
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := AssetDigest(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("AssetDigest() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("AssetDigest() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestDigests(t *testing.T) {
	tests := []struct {
		name    string
		want    map[string][sha256.Size]byte
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := Digests()
			if (err != nil) != tt.wantErr {
				t.Errorf("Digests() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Digests() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAssetNames(t *testing.T) {
	tests := []struct {
		name string
		want []string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := AssetNames(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("AssetNames() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAssetDir(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    []string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := AssetDir(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("AssetDir() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("AssetDir() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestRestoreAsset(t *testing.T) {
	type args struct {
		dir  string
		name string
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := RestoreAsset(tt.args.dir, tt.args.name); (err != nil) != tt.wantErr {
				t.Errorf("RestoreAsset() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestRestoreAssets(t *testing.T) {
	type args struct {
		dir  string
		name string
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := RestoreAssets(tt.args.dir, tt.args.name); (err != nil) != tt.wantErr {
				t.Errorf("RestoreAssets() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func Test_filePath(t *testing.T) {
	type args struct {
		dir  string
		name string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := _filePath(tt.args.dir, tt.args.name); got != tt.want {
				t.Errorf("_filePath() = %v, want %v", got, tt.want)
			}
		})
	}
}
