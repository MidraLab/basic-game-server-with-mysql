// Code generated by MockGen. DO NOT EDIT.
// Source: auth_interface.go
//
// Generated by this command:
//
//	mockgen -source=auth_interface.go -destination=../../mocks/auth_mocks.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bunrouter "github.com/uptrace/bunrouter"
	gomock "go.uber.org/mock/gomock"
)

// MockMiddlewareInterface is a mock of MiddlewareInterface interface.
type MockMiddlewareInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareInterfaceMockRecorder
}

// MockMiddlewareInterfaceMockRecorder is the mock recorder for MockMiddlewareInterface.
type MockMiddlewareInterfaceMockRecorder struct {
	mock *MockMiddlewareInterface
}

// NewMockMiddlewareInterface creates a new mock instance.
func NewMockMiddlewareInterface(ctrl *gomock.Controller) *MockMiddlewareInterface {
	mock := &MockMiddlewareInterface{ctrl: ctrl}
	mock.recorder = &MockMiddlewareInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddlewareInterface) EXPECT() *MockMiddlewareInterfaceMockRecorder {
	return m.recorder
}

// AuthenticateMiddleware mocks base method.
func (m *MockMiddlewareInterface) AuthenticateMiddleware() func(bunrouter.HandlerFunc) bunrouter.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateMiddleware")
	ret0, _ := ret[0].(func(bunrouter.HandlerFunc) bunrouter.HandlerFunc)
	return ret0
}

// AuthenticateMiddleware indicates an expected call of AuthenticateMiddleware.
func (mr *MockMiddlewareInterfaceMockRecorder) AuthenticateMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateMiddleware", reflect.TypeOf((*MockMiddlewareInterface)(nil).AuthenticateMiddleware))
}

// CorsMiddleware mocks base method.
func (m *MockMiddlewareInterface) CorsMiddleware() func(bunrouter.HandlerFunc) bunrouter.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorsMiddleware")
	ret0, _ := ret[0].(func(bunrouter.HandlerFunc) bunrouter.HandlerFunc)
	return ret0
}

// CorsMiddleware indicates an expected call of CorsMiddleware.
func (mr *MockMiddlewareInterfaceMockRecorder) CorsMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorsMiddleware", reflect.TypeOf((*MockMiddlewareInterface)(nil).CorsMiddleware))
}

// RecoverMiddleware mocks base method.
func (m *MockMiddlewareInterface) RecoverMiddleware() func(bunrouter.HandlerFunc) bunrouter.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverMiddleware")
	ret0, _ := ret[0].(func(bunrouter.HandlerFunc) bunrouter.HandlerFunc)
	return ret0
}

// RecoverMiddleware indicates an expected call of RecoverMiddleware.
func (mr *MockMiddlewareInterfaceMockRecorder) RecoverMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverMiddleware", reflect.TypeOf((*MockMiddlewareInterface)(nil).RecoverMiddleware))
}
